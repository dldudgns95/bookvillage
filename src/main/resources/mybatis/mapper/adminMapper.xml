<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.bookvillage.dao.AdminMapper">
  
  <!-- 시설 Map -->
  <resultMap type="AttachFacDto" id="AttachFacMap">
    <id column="FAC_ATTACH_NO"             property="facAttachNo" />
    <result column="FAC_PATH"              property="facPath" />
    <result column="FAC_ORIGINAL_FILENAME" property="facOriginalFilename" />
    <result column="FAC_FILESYSTEM_NAME"   property="facFilesystemName" />
    <result column="FAC_HAS_THUMBNAIL"     property="facHasThumbnail" />
    <association javaType="FacilityDto" property="facilityDto">
      <id column="FAC_NO"          property="facNo" />
      <result column="FAC_NAME"    property="facName" />
      <result column="FAC_CONTENT" property="facContent" />
    </association>
  </resultMap> 
  
  <!-- 희망도서Map -->
  <resultMap type="BookApplyDto" id="BookApplyMap">
    <id     column="APPLY_NO"  property="applyNo" />
    <result column="BOOK_NAME" property="bookName" />
    <result column="AUTHOR"    property="author" />
    <result column="PUBLISHER" property="publisher" />
    <result column="WISH"      property="wish" />
    <result column="STATUS"    property="status" />
    <association javaType="UserDto" property="userDto">
      <id     column="USER_NO" property="userNo" />
      <result column="NAME"    property="name" />
    </association>
  </resultMap>
  
  <!-- 도서대출Map -->
  <resultMap type="BookCheckoutDto" id="BookCheckoutMap">
    <id column="CHECKOUT_NO" property="checkoutNo" />
    <result column="STATUS" property="status" />
    <result column="CHECKOUT_DATE" property="checkoutDate" />
    <result column="START_DATE" property="startDate" />
    <result column="DUE_DATE" property="dueDate" />
    <result column="END_DATE" property="endDate" />
    <association javaType="UserDto" property="userDto">
      <id     column="USER_NO" property="userNo" />
      <result column="NAME"    property="name" />
    </association>
    <association javaType="BookDto" property="bookDto">
      <id column="ISBN" property="isbn" />
      <id column="TITLE" property="title" />
    </association>
  </resultMap>
  
  <!-- 시설이용신청 Map -->
  <resultMap type="facApplyDto" id="FacApplyMap">
    <id column="FAC_APPLY_NO"     property="facApplyNo" />
    <result column="FAC_REG_DATE" property="facRegDate" />
    <result column="FAC_START"    property="facStart" />
    <result column="FAC_STATUS"   property="facStatus" />
    <association javaType="UserDto" property="userDto">
      <id column="USER_NO" property="userNo" />
      <result column="NAME" property="name" />
    </association>
    <association javaType="FacilityDto" property="facilityDto">
      <id column="FAC_NO" property="facNo" />
      <result column="FAC_NAME" property="facName" />
    </association>
  </resultMap>
  
  <!-- 책 API로 넣기 -->
  <insert id="insertBook" parameterType="bookDto">
    INSERT INTO BOOK(
      ISBN
    , TITLE
    , COVER
    , AUTHOR
    , PUBLISHER
    , PUBDATE
    , DESCRIPTION
    , STATUS
    , CATEGORY_NAME
    , CATEGORY_ID
    ) VALUES(
      #{isbn}
    , #{title}
    , #{cover}
    , #{author}
    , #{publisher}
    , #{pubdate}
    , #{description}
    , 1
    , #{categoryName}
    , #{categoryId}
    )
  </insert>
  
  <!-- 책 직접 넣기 -->
  <insert id="insertDirectBook" parameterType="bookDto">
    INSERT INTO BOOK(
      ISBN
    , TITLE
    , COVER
    , AUTHOR
    , PUBLISHER
    <if test="pubdate != null">
    , PUBDATE
    </if>
    , DESCRIPTION
    , STATUS
    , CATEGORY_NAME
    ) VALUES(
      #{isbn}
    , #{title}
    , #{cover}
    , #{author}
    , #{publisher}
    <if test="pubdate != null">
    , #{pubdate}
    </if>
    , #{description}
    , 1
    , #{categoryName}
    )
  </insert>
  
  <update id="editBook" parameterType="bookDto">
    UPDATE BOOK
       SET TITLE = #{title}
         , COVER = #{cover}
         , AUTHOR = #{author}
         , PUBLISHER = #{publisher}
         , PUBDATE = #{pubdate}
         , DESCRIPTION = #{description}
         , CATEGORY_NAME = #{categoryName}
     WHERE ISBN = #{isbn}
  </update>
  
  <!-- 총 유저수 카운트-->
  <select id="userTotalCount" resultType="int">
    SELECT COUNT(*)
      FROM USER_T
  </select>
  
  <!-- 유저 목록 가져오기-->
  <select id="getUserList" parameterType="Map" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO ASC) AS RN, USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
              FROM USER_T)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  
  <!-- 유저 상세 정보 가져오기-->
  <select id="getUserDetail" parameterType="int" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
      FROM USER_T
     WHERE USER_NO = #{userNo}
  </select>
  
  <!-- 유저 탈퇴시키기 -->
  <delete id="deleteUser" parameterType="int">
    DELETE 
      FROM USER_T
     WHERE USER_NO = #{userNo}    
  </delete>
  
  <!-- 검색 유저수 카운트-->
  <select id="userSearchCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM USER_T
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  
  <!-- 검색 유저 목록 가져오기-->
  <select id="getSearchUserList" parameterType="Map" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO ASC) AS RN, USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS
              FROM USER_T
             WHERE ${column} LIKE '%' || #{query} || '%')
     WHERE RN BETWEEN #{begin} AND #{end}
     
  </select>
  
  <!-- 총 도서수 카운트-->
  <select id="bookTotalCount" resultType="int">
    SELECT COUNT(*)
      FROM BOOK
  </select>
  
  <!-- 도서 목록 가져오기-->
  <select id="getBookList" parameterType="Map" resultType="BookDto">
    SELECT ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY PUBDATE DESC) AS RN, ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
              FROM BOOK)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 도서 상세 검색 -->
  <select id="getBookDetail" parameterType="long" resultType="BookDto">
    SELECT ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
      FROM BOOK
     WHERE ISBN = #{isbn}
  </select>
  
  <!-- 검색 도서수 카운트-->
  <select id="bookSearchCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM BOOK
     WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  
  <!-- 검색 도서 목록 가져오기-->
  <select id="getSearchBookList" parameterType="Map" resultType="BookDto">
    SELECT ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY PUBDATE DESC) AS RN, ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
              FROM BOOK
             WHERE ${column} LIKE '%' || #{query} || '%')
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 시설 등록 -->
  <insert id="addFacility" parameterType="FacilityDto">
    INSERT INTO FACILITY(
      FAC_NO
    , FAC_NAME
    , FAC_CONTENT
    ) VALUES (
      FACILITY_SEQ.NEXTVAL
    , #{facName}
    , #{facContent}
    )
  </insert>
  
  <!-- 시설 이미지 등록 -->
  <insert id="addFacImage" parameterType="AttachFacDto">
    INSERT INTO ATTACH_FAC(
      FAC_ATTACH_NO
    , FAC_NO
    , FAC_PATH
    , FAC_ORIGINAL_FILENAME
    , FAC_FILESYSTEM_NAME
    , FAC_HAS_THUMBNAIL
    ) VALUES (
      ATTACH_FAC_SEQ.NEXTVAL
    , FACILITY_SEQ.CURRVAL
    , #{facPath}
    , #{facOriginalFilename}
    , #{facFilesystemName}
    , #{facHasThumbnail}
    )
  </insert>
  
  <!-- 전체 시설 조회 -->
  <select id="getFacList" resultMap="AttachFacMap">
    SELECT FAC_ATTACH_NO,FAC_PATH, FAC_ORIGINAL_FILENAME, FAC_FILESYSTEM_NAME, FAC_HAS_THUMBNAIL, F.FAC_NO, FAC_NAME, FAC_CONTENT
      FROM ATTACH_FAC AF INNER JOIN FACILITY F
        ON AF.FAC_NO = F.FAC_NO
  </select>
  
  <!-- 사용 가능한 시설 조회 -->
  <select id="availableFacList" parameterType="String" resultMap="AttachFacMap">
    SELECT FAC_ATTACH_NO,FAC_PATH, FAC_ORIGINAL_FILENAME, FAC_FILESYSTEM_NAME, FAC_HAS_THUMBNAIL, F.FAC_NO, FAC_NAME, FAC_CONTENT
      FROM ATTACH_FAC AF INNER JOIN FACILITY F
        ON AF.FAC_NO = F.FAC_NO
     WHERE F.FAC_NO NOT IN (SELECT FAC_NO
                              FROM FAC_APPLY
                             WHERE TO_CHAR(FAC_START, 'YYMMDD') = #{facStart}
                               AND FAC_STATUS IN (0, 1))
  </select>
  
  <!-- 사용 불가능한 시설 조회 -->
  <select id="unavailableFacList" parameterType="String" resultMap="AttachFacMap">
    SELECT FAC_ATTACH_NO,FAC_PATH, FAC_ORIGINAL_FILENAME, FAC_FILESYSTEM_NAME, FAC_HAS_THUMBNAIL, F.FAC_NO, FAC_NAME, FAC_CONTENT
      FROM ATTACH_FAC AF INNER JOIN FACILITY F
        ON AF.FAC_NO = F.FAC_NO
     WHERE F.FAC_NO IN (SELECT FAC_NO
                          FROM FAC_APPLY
                         WHERE TO_CHAR(FAC_START, 'YYMMDD') = #{facStart}
                           AND FAC_STATUS IN (0, 1))
  </select>
  
  <!-- 시설 이용 신청 -->
  <insert id="addFacApply" parameterType="Map">
    INSERT INTO FAC_APPLY(
      FAC_APPLY_NO
    , USER_NO
    , FAC_NO
    , FAC_REG_DATE
    , FAC_START
    , FAC_STATUS
    ) VALUES (
      FAC_APPLY_SEQ.NEXTVAL
    , #{userNo}
    , #{facNo}
    , SYSDATE
    , #{facStart}
    , 0
    )
  </insert>
  
  <!-- 해당유저 해당날짜에 이용신청 여부 확인 -->
  <select id="checkFacApply" parameterType="Map" resultType="boolean">
    SELECT COUNT(*)
      FROM FAC_APPLY
     WHERE USER_NO = #{userNo}
       AND TO_CHAR(FAC_START, 'YYMMDD') = #{facStart}
       AND FAC_STATUS IN (0, 1)
  </select>
  
  <!-- 희망도서 수 카운트-->
  <select id="bookApplyCount" resultType="int">
    SELECT COUNT(*)
      FROM BOOK_APPLY
     WHERE STATUS = 0
  </select>
  
  <!-- 희망도서 목록 조회 -->
  <select id="getBookApplyList" parameterType="Map" resultMap="BookApplyMap">
    SELECT APPLY_NO, USER_NO, NAME, BOOK_NAME, AUTHOR, PUBLISHER, WISH, STATUS
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY APPLY_NO ASC) AS RN, APPLY_NO, U.USER_NO, U.NAME, BOOK_NAME, AUTHOR, PUBLISHER, WISH, BA.STATUS
              FROM BOOK_APPLY BA INNER JOIN USER_T U
                ON BA.USER_NO = U.USER_NO
             WHERE BA.STATUS = 0)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 해당 유저의 희망도서 목록 조회 -->
  <select id="getUserBookApplyList" parameterType="int" resultMap="BookApplyMap">
    SELECT APPLY_NO, BA.USER_NO, NAME, BOOK_NAME, AUTHOR, PUBLISHER, WISH, BA.STATUS
      FROM BOOK_APPLY BA INNER JOIN USER_T U
        ON BA.USER_NO = U.USER_NO
     WHERE BA.USER_NO = #{userNo}
  </select>
  
  <!-- 희망도서 상세 조회 -->
  <select id="getBookApplyDetail" parameterType="int" resultMap="BookApplyMap">
    SELECT APPLY_NO, U.USER_NO, U.NAME, BOOK_NAME, AUTHOR, PUBLISHER, WISH, BA.STATUS
      FROM BOOK_APPLY BA INNER JOIN USER_T U
        ON BA.USER_NO = U.USER_NO
     WHERE APPLY_NO = #{applyNo}
  </select>
  
  <!-- 해당 유저의 대출 목록 조회(반납완료는 제외) -->
  <select id="getUserBookCheckoutList" parameterType="int" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
      FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
        ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
        ON BC.ISBN = B.ISBN
     WHERE BC.USER_NO = #{userNo}
       AND BC.STATUS NOT IN (2)
  </select>
  
  <!-- 대출 신청한 도서 수 카운트 -->
  <select id="bookCheckoutCount" resultType="int">
    SELECT COUNT(*)
      FROM BOOK_CHECKOUT
     WHERE STATUS = 0
  </select>
  
  <!-- 대출 신청한 도서 목록 조회 -->
  <select id="getBookCheckoutList" parameterType="Map" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, USER_NO, NAME, ISBN, TITLE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY CHECKOUT_NO ASC) AS RN,CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
              FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
                ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
                ON BC.ISBN = B.ISBN
             WHERE BC.STATUS = 0)
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 대출 신청한 검색 도서 수 카운트 -->
  <select id="bookCheckoutSearchCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM BOOK_CHECKOUT BC INNER JOIN BOOK B
        ON BC.ISBN = B.ISBN INNER JOIN USER_T U
        ON BC.USER_NO = U.USER_NO
     WHERE BC.STATUS = 0
       <choose>
         <when test="column == 'USER_NO'">
           AND BC.USER_NO LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'NAME'">
           AND NAME LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'ISBN'">
           AND BC.ISBN LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'TITLE'">
           AND TITLE LIKE '%' || #{query} || '%'
         </when>
       </choose>
  </select>
  
  <!-- 대출 신청한 검색 도서 목록 조회 -->
  <select id="getBookCheckoutSearchList" parameterType="Map" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, USER_NO, NAME, ISBN, TITLE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY CHECKOUT_NO ASC) AS RN,CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
              FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
                ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
                ON BC.ISBN = B.ISBN
             WHERE BC.STATUS = 0
             <choose>
               <when test="column == 'USER_NO'">
                 AND BC.USER_NO LIKE '%' || #{query} || '%'
               </when>
               <when test="column == 'NAME'">
                 AND NAME LIKE '%' || #{query} || '%'
               </when>
               <when test="column == 'ISBN'">
                 AND BC.ISBN LIKE '%' || #{query} || '%'
               </when>
               <when test="column == 'TITLE'">
                 AND TITLE LIKE '%' || #{query} || '%'
               </when>
             </choose>
                )
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 대출 신청한 도서 수 카운트 -->
  <select id="bookCheckoutReturnCount" resultType="int">
    SELECT COUNT(*)
      FROM BOOK_CHECKOUT
     WHERE STATUS IN (1, 3)
  </select>
  
  <!-- 대출 신청한 도서 목록 조회 -->
  <select id="getBookCheckoutReturnList" parameterType="Map" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, USER_NO, NAME, ISBN, TITLE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY CHECKOUT_NO ASC) AS RN,CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
              FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
                ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
                ON BC.ISBN = B.ISBN
             WHERE BC.STATUS IN (1, 3))
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 대출 신청한 검색 도서 수 카운트 -->
  <select id="bookCheckoutReturnSearchCount" parameterType="Map" resultType="int">
    SELECT COUNT(*)
      FROM BOOK_CHECKOUT BC INNER JOIN BOOK B
        ON BC.ISBN = B.ISBN INNER JOIN USER_T U
        ON BC.USER_NO = U.USER_NO
     WHERE BC.STATUS IN (1, 3)
       <choose>
         <when test="column == 'USER_NO'">
           AND BC.USER_NO LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'NAME'">
           AND NAME LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'ISBN'">
           AND BC.ISBN LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'TITLE'">
           AND TITLE LIKE '%' || #{query} || '%'
         </when>
       </choose>
  </select>
  
  <!-- 대출 신청한 검색 도서 목록 조회 -->
  <select id="getBookCheckoutReturnSearchList" parameterType="Map" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, USER_NO, NAME, ISBN, TITLE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY CHECKOUT_NO ASC) AS RN,CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
              FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
                ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
                ON BC.ISBN = B.ISBN
             WHERE BC.STATUS IN (1, 3)
               <choose>
         <when test="column == 'USER_NO'">
           AND BC.USER_NO LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'NAME'">
           AND NAME LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'ISBN'">
           AND BC.ISBN LIKE '%' || #{query} || '%'
         </when>
         <when test="column == 'TITLE'">
           AND TITLE LIKE '%' || #{query} || '%'
         </when>
       </choose>
       )
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 대출 신청 승인 업데이트 -->
  <update id="approvalBookCheckout" parameterType="int">
    UPDATE BOOK_CHECKOUT
       SET STATUS = 1
         , START_DATE = SYSDATE
         , DUE_DATE = SYSDATE + 7
         , DELAY = 0
     WHERE CHECKOUT_NO = #{checkoutNo}
  </update>
  
  <!-- 대출 반납 승인 업데이트 -->
  <update id="approvalBookCheckoutReturn" parameterType="int">
    UPDATE BOOK_CHECKOUT
       SET STATUS = 2
         , END_DATE = SYSDATE
     WHERE CHECKOUT_NO = #{checkoutNo}
  </update>
  
  <!-- 반납 완료 시 해당 도서 상태 업데이트 -->
  <update id="activeBook" parameterType="String">
    UPDATE BOOK
       SET STATUS = 1
     WHERE ISBN = #{isbn}
  </update>
  
  <!-- 반납 완료 시 유저의 대출권수 줄이기 업데이트 -->
  <update id="minusBookCount" parameterType="int">
    UPDATE USER_T
       SET BOOKCOUNT = BOOKCOUNT - 1
     WHERE USER_NO = #{userNo}
       AND BOOKCOUNT &gt; 0
  </update>
  
  <!-- 연체중인 회원 반납 시 대출 가능하게 업데이트 -->
  <update id="updateActiveUser" parameterType="int">
    UPDATE USER_T
       SET STATUS = 1
     WHERE USER_NO = #{userNo}
  </update>
  
  <!-- 회원 대출 불가 상태로 업데이트 -->
  <update id="updateInactiveUser" parameterType="int">
    UPDATE USER_T
       SET STATUS = 0
     WHERE USER_NO = #{userNo}
  </update>
  
  <!-- 시설이용신청 리스트 조회 -->
  <select id="getFacApplyList" resultMap="FacApplyMap">
    SELECT FAC_APPLY_NO, FAC_REG_DATE, FAC_START, FAC_STATUS, FA.USER_NO, NAME, FA.FAC_NO, FAC_NAME
      FROM FAC_APPLY FA INNER JOIN USER_T U
        ON FA.USER_NO = U.USER_NO INNER JOIN FACILITY F
        ON FA.FAC_NO = F.FAC_NO
     WHERE FAC_STATUS = 0
  </select>
  
  <!-- 해당 유저의 시설이용신청 리스트 조회 -->
  <select id="getUserFacApplyList" parameterType="int" resultMap="FacApplyMap">
    SELECT FAC_APPLY_NO, FAC_REG_DATE, FAC_START, FAC_STATUS, FA.USER_NO, NAME, FA.FAC_NO, FAC_NAME
      FROM FAC_APPLY FA INNER JOIN USER_T U
        ON FA.USER_NO = U.USER_NO INNER JOIN FACILITY F
        ON FA.FAC_NO = F.FAC_NO
       AND FA.USER_NO = #{userNo}
  </select>
  
  <!-- 등록된 책인지 확인 -->
  <select id="checkAddBook" parameterType="String" resultType="boolean">
    SELECT COUNT(*)
      FROM BOOK
     WHERE ISBN = #{isbn}
  </select>
  
  <!-- 대출중일때 대출권수 늘어나게 -->
  <update id="addUserBookCount" parameterType="int">
    UPDATE USER_T
       SET BOOKCOUNT = BOOKCOUNT + 1
     WHERE USER_NO = #{userNo}
  </update>
  
  <!-- 희망도서 추가 완료 업데이트 -->
  <update id="updateBookApply" parameterType="int">
    UPDATE BOOK_APPLY
       SET STATUS = 1
     WHERE APPLY_NO = #{applyNo}
  </update>
  
  <!-- 시설이용 신청 승인 -->
  <update id="approveFacApply" parameterType="int">
    UPDATE FAC_APPLY
       SET FAC_STATUS = 1
     WHERE FAC_APPLY_NO = #{facApplyNo}
  </update>
  
  <!-- 시설이용 신청 거절 -->
  <update id="refuseFacApply" parameterType="int">
    UPDATE FAC_APPLY
       SET FAC_STATUS = 2
     WHERE FAC_APPLY_NO = #{facApplyNo}
  </update>
  
  <!-- 해당 시설 삭제 -->
  <delete id="deleteFac" parameterType="int">
    DELETE
      FROM FACILITY
     WHERE FAC_NO = #{facNo}
  </delete>
  
  <!-- 해당 도서 삭제 -->
  <delete id="deleteBook" parameterType="String">
    DELETE
      FROM BOOK
     WHERE ISBN = #{isbn}
  </delete>
  
  <!-- 시설 수정을 위한 시설 상세 정보 -->
  <select id="getFacDetail" parameterType="int" resultMap="AttachFacMap">
    SELECT FAC_ATTACH_NO,FAC_PATH, FAC_ORIGINAL_FILENAME, FAC_FILESYSTEM_NAME, FAC_HAS_THUMBNAIL, F.FAC_NO, FAC_NAME, FAC_CONTENT
      FROM ATTACH_FAC AF INNER JOIN FACILITY F
        ON AF.FAC_NO = F.FAC_NO
       AND F.FAC_NO = #{facNo}
  </select>
  
  <!-- 시설 수정 업데이트 -->
  <update id="editFacility" parameterType="FacilityDto">
    UPDATE FACILITY
       SET FAC_NAME = #{facName}
         , FAC_CONTENT = #{facContent}
     WHERE FAC_NO = #{facNo}
  </update>
  
  <!-- 시설 이미지 업데이트 -->
  <update id="editAttachFac" parameterType="AttachFacDto">
    UPDATE ATTACH_FAC
       SET FAC_PATH = #{facPath}
         , FAC_ORIGINAL_FILENAME = #{facOriginalFilename}
         , FAC_FILESYSTEM_NAME = #{facFilesystemName}
         , FAC_HAS_THUMBNAIL = #{facHasThumbnail}
     WHERE FAC_ATTACH_NO = #{facAttachNo}
  </update>
  
  <!-- 도서 대출 불가능으로 업데이트 -->
  <update id="inactiveBook" parameterType="String">
    UPDATE BOOK
       SET STATUS = 0
     WHERE ISBN = #{isbn}
  </update>
  
  <!-- 해당 도서의 대출 현황 표시 -->
  <select id="getBookCheckoutByISBN" parameterType="String" resultMap="BookCheckoutMap">
    SELECT CHECKOUT_NO, BC.STATUS, CHECKOUT_DATE, START_DATE, DUE_DATE, END_DATE, BC.USER_NO, NAME, BC.ISBN, TITLE
              FROM BOOK_CHECKOUT BC INNER JOIN USER_T U
                ON BC.USER_NO = U.USER_NO INNER JOIN BOOK B
                ON BC.ISBN = B.ISBN
             WHERE BC.ISBN = #{isbn}
               AND BC.STATUS NOT IN (2,4)
  </select>
  
  
  
  
  
  
  
  
  
</mapper>