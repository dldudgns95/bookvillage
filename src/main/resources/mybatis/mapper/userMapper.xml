<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.bookvillage.dao.UserMapper">
  
  <resultMap type="UserDto" id="UserMap">
    <id      column="USER_NO"           property="userNo" />
    <result  column="EMAIL"             property="email"/>
    <result  column="PW"                property="pw"/>
    <result  column="NAME"              property="name"/>
    <result  column="MOBILE"            property="mobile"/>
    <result  column="GENDER"            property="gender"/>
    <result  column="AGREE"             property="agree"/>
    <result  column="STATE"             property="state"/>
    <result  column="AUTH"              property="auth"/>
    <result  column="PW_MODIFIED_DATE"  property="pwModifiedDate"/>
    <result  column="JOINED_DATE"       property="joinedDate"/>
    <result  column="STATUS"            property="status"/>
    <result  column="BOOKCOUNT"         property="bookcount"/>
    <association  javaType="AccessDto" property="accessDto" >
      <result     column="EMAIL"       property="email" />
      <result     column="LOGIN_DATE"  property="loginDate" />
    </association>
  </resultMap>

  <!-- 시설 Map -->
  <resultMap type="AttachFacDto" id="AttachFacMap">
    <id column="FAC_ATTACH_NO"             property="facAttachNo" />
    <result column="FAC_PATH"              property="facPath" />
    <result column="FAC_ORIGINAL_FILENAME" property="facOriginalFilename" />
    <result column="FAC_FILESYSTEM_NAME"   property="facFilesystemName" />
    <result column="FAC_HAS_THUMBNAIL"     property="facHasThumbnail" />
    <association javaType="FacilityDto" property="facilityDto">
      <id column="FAC_NO"          property="facNo" />
      <result column="FAC_NAME"    property="facName" />
      <result column="FAC_CONTENT" property="facContent" />
    </association>
  </resultMap>   
  
  
  

  <select id="getUser" parameterType="Map" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH,PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
      FROM USER_T
    <where>
      <if test="email != null">EMAIL = #{email}</if>
      <if test="pw != null">AND PW = #{pw}</if>
      <if test="userNo != null">AND USER_NO = #{userNo}</if>
    </where>
  </select>
  
  <insert id="insertAccess" parameterType="String">
    INSERT INTO ACCESS_T(
        EMAIL
      , LOGIN_DATE
    ) VALUES (
        #{email}
      , SYSDATE  
       )
  </insert>
  
  <select id="getInactiveUser" parameterType="Map" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH,PW_MODIFIED_DATE, JOINED_DATE, INACTIVE_DATE
      FROM INACTIVE_USER
     <where>
       <if test="email != null">EMAIL = #{email}</if>
       <if test="pw != null">AND PW = #{pw}</if>
     </where>
   </select>
   
   
   <insert id="insertUsesr" parameterType="UserDto">
      INSERT INTO USER_T (
        USER_NO
      , EMAIL
      , PW
      , NAME
      , MOBILE
      , GENDER
      , AGREE
      , STATE
      , AUTH
      , PW_MODIFIED_DATE
      , JOINED_DATE
      , STATUS
      , BOOKCOUNT
      ) VALUES (
          USER_T_SEQ.NEXTVAL
        , #{email}
        , #{pw}
        , #{name}
        , #{mobile}
        , #{gender}
        , #{agree}
        , 0
        , 0
      , SYSDATE
      , SYSDATE
      , 1
      , 0
     )
   </insert>
   
   <update id="updatePw" parameterType="UserDto">
      UPDATE USER_T
         SET PW = #{pw}
           , PW_MODIFIED_DATE = SYSDATE
       WHERE USER_NO = {userNo}    
   </update>
   
   <select id="findId"  resultType="UserDto">
      SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH,PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
        FROM USER_T
       WHERE NAME  = #{name}
         AND MOBILE = #{mobile}    
   </select>
   
   <select id="findIdInactiveUser"> 
      SELECT EMAIL
        FROM INACTIVE_USER
       WHERE NAME = #{name}
         AND MOBILE = #{mobile}
   </select>
   
  <insert id="insertNaverUser" parameterType="UserDto">
      INSERT INTO USER_T (
          USER_NO
        , EMAIL
        , NAME
        , MOBILE
        , GENDER
        , AGREE
        , STATE
        , AUTH
        , PW_MODIFIED_DATE
        , JOINED_DATE
        , STATUS
        , BOOKCOUNT
      ) VALUES (
          USER_T_SEQ.NEXTVAL
        , #{email}
        , #{name}
        , #{mobile}
        , #{gender}
        , #{agree}
        , 1
        , 0
        , SYSDATE
        , SYSDATE
        , 1
        , 0
      )
  </insert>
  
  <update id="autoupdatetmpPw" parameterType="UserDto">
    UPDATE USER_T
       SET PW_MODIFIED_DATE = SYSDATE
     WHERE USER_NO = #{userNo}
  </update>
  
  
  <select id="changePw90" parameterType="String" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH,PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
      FROM USER_T
     WHERE SYSDATE - PW_MODIFIED_DATE  >= 90
       AND EMAIL = #{email}
       AND STATE = 0
       AND (AUTH = 1 OR AUTH = 0)
  </select>
  
  <update id="updatePw90" parameterType="UserDto">
    UPDATE USER_T
       SET PW_MODIFIED_DATE = SYSDATE
     WHERE EMAIL = #{email}
       AND AUTH = 0
       AND (SYSDATE - NVL(PW_MODIFIED_DATE, JOINED_DATE)) >= 90
  </update>
  
  <insert id="kakaoJoin" parameterType="UserDto" >
     INSERT INTO USER_T (
        USER_NO
      , EMAIL
      , NAME
      , MOBILE
      , GENDER
      , AGREE
      , STATE
      , AUTH
      , PW_MODIFIED_DATE
      , JOINED_DATE
      , STATUS
      , BOOKCOUNT
      ) VALUES (
          USER_T_SEQ.NEXTVAL
        , #{email}
        , #{name}
        , #{mobile}
        , #{gender}
        , #{agree}
        , 2
        , 0
        , SYSDATE
        , SYSDATE
        , 1
        , 0
       )
    
  </insert>

  <!-- 신간 도서 슬라이드 -->
  <select id="getBookList" parameterType="BookDto">
   SELECT ISBN, TITLE, COVER, AUTHOR, PUBLISHER, PUBDATE, DESCRIPTION, STATUS, CATEGORY_NAME, CATEGORY_ID
    FROM BOOK
    ORDER BY PUBDATE DESC
    OFFSET 0 ROWS FETCH FIRST 10 ROWS ONLY
  </select>

  <select id="getFaqList" resultType="FaqDto">
    SELECT FAQ_NO, FAQ_TITLE, FAQ_CONTENT
      FROM FAQ
     ORDER BY FAQ_NO DESC
  </select>
  
    <select id="getNoticeList" resultType="NoticeDto">
    SELECT NT_NO, NT_TITLE, NT_CONTENT, USER_NO, NT_DATE, NT_ATTACH_COUNT
      FROM NOTICE
     ORDER BY NT_NO DESC
  </select>
  
  <update id="updatetmpPw" parameterType="Map">
    UPDATE USER_T
       SET PW = #{pwCode}
         , PW_MODIFIED_DATE = SYSDATE
     WHERE EMAIL = #{email}
  </update>
  

  <insert id="insertActiveUser"  parameterType="String">
    INSERT INTO USER_T (
         SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH, PW_MODIFIED_DATE, JOINED_DATE, STATUS, BOOKCOUNT
           FROM INACTIVE_USER 
          WHERE EMAIL = #{email}    
      ) 
  </insert>
  
  
  <delete id="deleteInactiveUser" parameterType="String">
    DELETE
      FROM INACTIVE_USER 
     WHERE EMAIL = #{email}  
      
  </delete>
  
  <insert id="insertInactiveUser">
    INSERT INTO INACTIVE_USER(
         SELECT USER_NO, U.EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, AUTH,PW_MODIFIED_DATE, JOINED_DATE, SYSDATE, STATUS, BOOKCOUNT
           FROM USER_T U LEFT OUTER JOIN ACCESS_T A
             ON U.EMAIL = A.EMAIL
           WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_DATE) &gt; 11
              OR (LOGIN_DATE IS NULL AND MONTHS_BETWEEN(SYSDATE, LOGIN_DATE) &gt; 11))
  </insert>
  
  
  <delete id="deleteUserForInactive">
    DELETE
      FROM USER_T
     WHERE EMAIL IN(SELECT U.EMAIL
                      FROM USER_T U LEFT OUTER JOIN ACCESS_T A
                        ON U.EMAIL = A.EMAIL
                     WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_DATE) &gt; 11
                        OR (LOGIN_DATE IS NULL AND MONTHS_BETWEEN(SYSDATE, LOGIN_DATE) &gt; 11))
  </delete>
  

  <!-- 전체 시설 조회 -->
  <select id="getFacList" resultMap="AttachFacMap">
    SELECT FAC_ATTACH_NO,FAC_PATH, FAC_ORIGINAL_FILENAME, FAC_FILESYSTEM_NAME, FAC_HAS_THUMBNAIL, F.FAC_NO, FAC_NAME, FAC_CONTENT
      FROM ATTACH_FAC AF INNER JOIN FACILITY F
        ON AF.FAC_NO = F.FAC_NO
  </select>  
  
  
</mapper>